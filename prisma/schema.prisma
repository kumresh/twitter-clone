// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Define the User model
model User {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  username   String
  email      String     @unique
  password   String
  profilePic String?
  location   String?
  dob        DateTime?
  followers  Follow[]   @relation("followers")
  following  Follow[]   @relation("following")
  tweets     Tweet[]
  bookmark   Bookmark[]
  like       Like[]
  session    Session[]
  reTweet    Retweet[]
  reply      Reply[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Follow {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  follower    User?   @relation("followers", fields: [followerId], references: [id])
  followerId  String? @db.ObjectId
  following   User?   @relation("following", fields: [followingId], references: [id])
  followingId String? @db.ObjectId
}

model Tweet {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  imageUrl  String?
  user      User       @relation(fields: [tweetBy], references: [id])
  tweetBy   String     @db.ObjectId
  hashTag   HashTag[]
  retweet   Retweet[]
  reply     Reply[]
  bookmark  Bookmark[]
  like      Like[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Retweet {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  user    User    @relation(fields: [userId], references: [id])
  tweet   Tweet?  @relation(fields: [tweetId], references: [id])
  tweetId String? @db.ObjectId
  userId  String  @db.ObjectId
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  tweet     Tweet?   @relation(fields: [tweetId], references: [id])
  tweetId   String?  @db.ObjectId
}

model Reply {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  imageUrl  String?
  createdAt DateTime @default(now())
  tweet     Tweet?   @relation(fields: [tweetId], references: [id])
  tweetId   String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model Bookmark {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  user    User?   @relation(fields: [userId], references: [id])
  userId  String? @db.ObjectId
  tweet   Tweet?  @relation(fields: [tweetId], references: [id])
  tweetId String? @db.ObjectId
}

model HashTag {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  tweet   Tweet?  @relation(fields: [tweetId], references: [id])
  tweetId String? @db.ObjectId
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  voided       Boolean  @default(false)
}
